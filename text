#include <GL/gl.h>
#include <GL/glut.h>
#include<stdio.h>
#include<stdlib.h>
#include<math.h>
float x,y,i;
float counter_mercury=0.0;
float counter_venus=0.0;
float counter_earth=0.0;
float counter_mars=0.0;
void init(void)
{
	//gluOrtho2D(0,800,400,0);
	//glOrtho(0,800,500,0,1,-1);
}
void solar(void)
{
	glClearColor(0.0,0.0,0.0,0.0);
	glClear(GL_COLOR_BUFFER_BIT);
	//glPointSize(10.0);
	//glLoadIdentity();
     glLoadIdentity();


     // Sun
	 glBegin(GL_TRIANGLE_FAN);
		glColor3ub(255,255,0);
		for(i=0;i<=2*3.14;i+=0.0001)
		{
			x=0.1*sin(i);
			y=0.1*cos(i);
			glVertex2f(x,y);
		}
     glEnd();

     // mercury line
     glPushMatrix();
     //glTranslatef(0,0,0);
     glBegin(GL_LINES);
		glColor3ub(255,255,255);
		for(i=0;i<=2*3.14;i+=0.01)
		{
			x=0.25*sin(i);
			y=0.25*cos(i);
			glVertex2f(x,y);
		}
     glEnd();
     glPopMatrix();

     glPushMatrix();

     //mercury
     glRotatef(counter_mercury,0.0,0.0,-1.0);
	 counter_mercury+=1;
	 glTranslatef(0.25,0,0);
     glBegin(GL_TRIANGLE_FAN);
     glColor3ub(255,255,255);
     for(i=0;i<=2*3.14;i+=0.0001)
     {
			x=0.03*sin(i);
			y=0.03*cos(i);
			glVertex2f(x,y);
     }
     glEnd();
     glPopMatrix();

     // venus line
     glBegin(GL_LINES);
		glColor3ub(255,255,255);
		for(i=0;i<=2*3.14;i+=0.01)
		{
			x=0.4*sin(i);
			y=0.4*cos(i);
			glVertex2f(x,y);
		}
     glEnd();

     //venus
     glPushMatrix();
     glRotatef(counter_venus,0.0,0.0,-1.0);
	 counter_venus+=0.7;
     glTranslatef(0.4,0,0);
     glBegin(GL_TRIANGLE_FAN);
     glColor3ub(251,229,186);
     for(i=0;i<=2*3.14;i+=0.0001)
     {
			x=0.04*sin(i);
			y=0.04*cos(i);
			glVertex2f(x,y);
     }
     glEnd();
     glPopMatrix();

     // earth line
     glBegin(GL_LINES);
		glColor3ub(255,255,255);
		for(i=0;i<=2*3.14;i+=0.01)
		{
			x=0.55*sin(i);
			y=0.55*cos(i);
			glVertex2f(x,y);
		}
     glEnd();

     //earth
     glPushMatrix();
     glRotatef(counter_earth,0.0,0.0,-1.0);
	 counter_earth+=0.5;
     glTranslatef(0.55,0,0);
     glBegin(GL_TRIANGLE_FAN);
     glColor3ub(0,171,248);
     for(i=0;i<=2*3.14;i+=0.0001)
     {
			x=0.05*sin(i);
			y=0.05*cos(i);
			glVertex2f(x,y);
     }
     glEnd();
     glPopMatrix();

     // mars line
     glBegin(GL_LINES);
		glColor3ub(255,255,255);
		for(i=0;i<=2*3.14;i+=0.01)
		{
			x=0.7*sin(i);
			y=0.7*cos(i);
			glVertex2f(x,y);
		}
     glEnd();


     //mars
     glPushMatrix();
     glRotatef(counter_mars,0.0,0.0,-1.0);
	 counter_mars+=0.4;
     glTranslatef(0.7,0,0);
     glBegin(GL_TRIANGLE_FAN);
     glColor3ub(230,0,0);
     for(i=0;i<=2*3.14;i+=0.0001)
     {
			x=0.06*sin(i);
			y=0.06*cos(i);
			glVertex2f(x,y);
     }
     glEnd();
     glPopMatrix();


	 glutSwapBuffers();
}
int main(int argc,char** argv)
{
	glutInit(&argc,argv);
	glutInitDisplayMode(GLUT_RGB|GLUT_DOUBLE);
	glutInitWindowPosition(-1,-1);
	glutInitWindowSize(640,480);
	glutCreateWindow("solar system");
	init();
	glutDisplayFunc(solar);
	glutIdleFunc(solar);
	glutMainLoop();
	return 0;
}
